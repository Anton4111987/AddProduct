@namespace ClassWork_WebApp_17._12._2023.Services
@inject IEmailSender sendMessage
@inject ILogger<SendMessageForEmail> Logger
@page "/SendMessage"
@using ClassWork_WebApp_17._12._2023.Models
@using MailKit


<h3>Отправка email</h3>
<div>

	<p>
		Введите email address:<br />
		<input id="Email" @bind-value="sendEmailDataModel.Email" />
	</p>

	<p>
		Введите тему письма:<br />
		<input id="Email" @bind-value="sendEmailDataModel.Subject" />
	</p>

	<p>
		Введите текст сообщения:<br />
		<textarea id="Message" @bind="sendEmailDataModel.StringMessage" />
	</p>
	
	<button class="btn btn-primary" id="Send" @onclick="Send">Отправить</button>
	<button class="btn btn-primary" id="Send" @onclick="SendWithParam">Отправить письмо с параметрами</button>
	<div> @dispatchReport </div>
	
	
</div>


@code {

	SendEmailDataModel sendEmailDataModel = new();
	int _attemptToSend = 0; // количечтво попыток отправки
	SendEmailDataModel sendEmailDataModelWithPArams = new(){
															Email = "laant@mail.ru",
															Subject="Новая тема с параметрами",
															StringMessage="Новое сообщение с параметрами"};
	string? dispatchReport; // обратная связь о том что письмо отправлено
	private async Task Send()
	{
		try
		{
			_attemptToSend++;
			Logger.LogInformation("Попытка отправки имейла на адрес {Email}", sendEmailDataModel.Email);
			await sendMessage.SendEmail(sendEmailDataModel);
			dispatchReport = $"Сообщение '{sendEmailDataModel.Subject}' успешно отправлено";
			
			Logger.LogInformation("Сообщение на адрес {Email} успешно отправлено", sendEmailDataModel.Email);
			sendEmailDataModel = new();
		}
		catch (Exception e) when (_attemptToSend < 3
										&& e is ServiceNotAuthenticatedException
										or ServiceNotConnectedException
										//...
										)
		{
			Logger.LogWarning(e, "Ошибка отправки имейла на адрес {Email}. Делаем еще одну попытку", sendEmailDataModel.Email, e.Message);
			await Send(); //retry
		}
		catch(Exception e)
		{
			// Даем разработчику явно понять, что произошла ошибка, и что нужно что-то делать.
			Logger.LogError(e, "Ошибка отправки имейла на адрес {Email}. Ошибка: {Error}", sendEmailDataModel.Email, e.Message);
			dispatchReport = "Ошибка отправки письма";
		}

		
	}
	public async Task SendWithParam()
	{
		await sendMessage.SendEmail(sendEmailDataModelWithPArams);
		dispatchReport = $"Сообщение '{sendEmailDataModelWithPArams.Subject}' успешно отправлено";
		sendEmailDataModel = new();
	}

}
